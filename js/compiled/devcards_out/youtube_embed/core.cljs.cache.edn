;; Analyzed by ClojureScript 1.7.170
{:use-macros {deftest devcards.core, defcard devcards.core}, :excludes #{}, :name youtube-embed.core, :imports nil, :requires {r reagent.core, reagent.core reagent.core, sab sablono.core, sablono.core sablono.core, cs clojure.string, clojure.string clojure.string}, :uses nil, :defs {gcd {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 19, :column 7, :end-line 19, :end-column 10, :arglists (quote ([a b])), :doc "(gcd a b) computes the greatest common divisor of a and b. for ratio http://rosettacode.org/wiki/Greatest_common_divisor#Clojure"}, :name youtube-embed.core/gcd, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "(gcd a b) computes the greatest common divisor of a and b. for ratio http://rosettacode.org/wiki/Greatest_common_divisor#Clojure"}, main {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 356, :column 7, :end-line 356, :end-column 11, :arglists (quote ([]))}, :name youtube-embed.core/main, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bmi-component {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 124, :column 7, :end-line 124, :end-column 20, :arglists (quote ([bmi-data]))}, :name youtube-embed.core/bmi-component, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 20, :method-params ([bmi-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bmi-data]))}, slider {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([bmi-data param value min max]))}, :name youtube-embed.core/slider, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 13, :method-params ([bmi-data param value min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 5, :fn-var true, :arglists (quote ([bmi-data param value min max]))}, calc-bmi {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 26, :column 7, :end-line 26, :end-column 15, :arglists (quote ([bmi-data]))}, :name youtube-embed.core/calc-bmi, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 15, :method-params ([bmi-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bmi-data]))}, fluff {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 54, :column 7, :end-line 54, :end-column 12, :arglists (quote ([skinny width height length]))}, :name youtube-embed.core/fluff, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 12, :method-params ([skinny width height length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 4, :fn-var true, :arglists (quote ([skinny width height length]))}, htmlout {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 64, :column 7, :end-line 64, :end-column 14, :arglists (quote ([bmi-data param value width height min max length]))}, :name youtube-embed.core/htmlout, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 14, :method-params ([bmi-data param value width height min max length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 8, :fn-var true, :arglists (quote ([bmi-data param value width height min max length]))}, first-example-state {:name youtube-embed.core/first-example-state, :file "src/youtube_embed/core.cljs", :line 13, :column 1, :end-line 13, :end-column 29, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 13, :column 10, :end-line 13, :end-column 29}}, ifriendly {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([url]))}, :name youtube-embed.core/ifriendly, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url]))}, htmloutvisual {:protocol-inline nil, :meta {:file "/Volumes/SamsungSSD/Users/michaellopez/src/youtube-embed/src/youtube_embed/core.cljs", :line 97, :column 7, :end-line 97, :end-column 20, :arglists (quote ([bmi-data param value width height min max length]))}, :name youtube-embed.core/htmloutvisual, :variadic false, :file "src/youtube_embed/core.cljs", :end-column 20, :method-params ([bmi-data param value width height min max length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 8, :fn-var true, :arglists (quote ([bmi-data param value width height min max length]))}}, :require-macros {dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:path :frame :inspect-data :else :func :name :width :history :yurl :documentation :card :main-obj :initial-data :YouTube :bmi :yourl :length :options :youtube_embed.core :height :heading}, :order [:yourl :path :func :youtube_embed.core :card :name :documentation :main-obj :initial-data :options :heading :height :width :bmi :yurl :length :else :YouTube :inspect-data :frame :history]}, :doc nil}